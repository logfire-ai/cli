// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: flink-service.proto

package flink_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlinkService_GetFilteredData_FullMethodName = "/sh.logfire.FlinkService/GetFilteredData"
	FlinkService_SubmitSQL_FullMethodName       = "/sh.logfire.FlinkService/SubmitSQL"
)

// FlinkServiceClient is the client API for FlinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlinkServiceClient interface {
	GetFilteredData(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilteredRecords, error)
	SubmitSQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLResponse, error)
}

type flinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlinkServiceClient(cc grpc.ClientConnInterface) FlinkServiceClient {
	return &flinkServiceClient{cc}
}

func (c *flinkServiceClient) GetFilteredData(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilteredRecords, error) {
	out := new(FilteredRecords)
	err := c.cc.Invoke(ctx, FlinkService_GetFilteredData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flinkServiceClient) SubmitSQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLResponse, error) {
	out := new(SQLResponse)
	err := c.cc.Invoke(ctx, FlinkService_SubmitSQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlinkServiceServer is the server API for FlinkService service.
// All implementations must embed UnimplementedFlinkServiceServer
// for forward compatibility
type FlinkServiceServer interface {
	GetFilteredData(context.Context, *FilterRequest) (*FilteredRecords, error)
	SubmitSQL(context.Context, *SQLRequest) (*SQLResponse, error)
	mustEmbedUnimplementedFlinkServiceServer()
}

// UnimplementedFlinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlinkServiceServer struct {
}

func (UnimplementedFlinkServiceServer) GetFilteredData(context.Context, *FilterRequest) (*FilteredRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredData not implemented")
}
func (UnimplementedFlinkServiceServer) SubmitSQL(context.Context, *SQLRequest) (*SQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSQL not implemented")
}
func (UnimplementedFlinkServiceServer) mustEmbedUnimplementedFlinkServiceServer() {}

// UnsafeFlinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlinkServiceServer will
// result in compilation errors.
type UnsafeFlinkServiceServer interface {
	mustEmbedUnimplementedFlinkServiceServer()
}

func RegisterFlinkServiceServer(s grpc.ServiceRegistrar, srv FlinkServiceServer) {
	s.RegisterService(&FlinkService_ServiceDesc, srv)
}

func _FlinkService_GetFilteredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkServiceServer).GetFilteredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlinkService_GetFilteredData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkServiceServer).GetFilteredData(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlinkService_SubmitSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlinkServiceServer).SubmitSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlinkService_SubmitSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlinkServiceServer).SubmitSQL(ctx, req.(*SQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlinkService_ServiceDesc is the grpc.ServiceDesc for FlinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sh.logfire.FlinkService",
	HandlerType: (*FlinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilteredData",
			Handler:    _FlinkService_GetFilteredData_Handler,
		},
		{
			MethodName: "SubmitSQL",
			Handler:    _FlinkService_SubmitSQL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flink-service.proto",
}
