// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: flink-service.proto

package logfire

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FilterService_GetFilteredData_FullMethodName    = "/ai.logfire.FilterService/GetFilteredData"
	FilterService_SubmitSQL_FullMethodName          = "/ai.logfire.FilterService/SubmitSQL"
	FilterService_SubmitAlertRequest_FullMethodName = "/ai.logfire.FilterService/SubmitAlertRequest"
	FilterService_DeleteAlertRequest_FullMethodName = "/ai.logfire.FilterService/DeleteAlertRequest"
	FilterService_CreateSource_FullMethodName       = "/ai.logfire.FilterService/CreateSource"
)

// FilterServiceClient is the client API for FilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilterServiceClient interface {
	GetFilteredData(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilteredRecords, error)
	SubmitSQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLResponse, error)
	SubmitAlertRequest(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*RegisteredAlert, error)
	DeleteAlertRequest(ctx context.Context, in *RegisteredAlert, opts ...grpc.CallOption) (*Empty, error)
	CreateSource(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error)
}

type filterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilterServiceClient(cc grpc.ClientConnInterface) FilterServiceClient {
	return &filterServiceClient{cc}
}

func (c *filterServiceClient) GetFilteredData(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilteredRecords, error) {
	out := new(FilteredRecords)
	err := c.cc.Invoke(ctx, FilterService_GetFilteredData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) SubmitSQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLResponse, error) {
	out := new(SQLResponse)
	err := c.cc.Invoke(ctx, FilterService_SubmitSQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) SubmitAlertRequest(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*RegisteredAlert, error) {
	out := new(RegisteredAlert)
	err := c.cc.Invoke(ctx, FilterService_SubmitAlertRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) DeleteAlertRequest(ctx context.Context, in *RegisteredAlert, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FilterService_DeleteAlertRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) CreateSource(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, FilterService_CreateSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterServiceServer is the server API for FilterService service.
// All implementations must embed UnimplementedFilterServiceServer
// for forward compatibility
type FilterServiceServer interface {
	GetFilteredData(context.Context, *FilterRequest) (*FilteredRecords, error)
	SubmitSQL(context.Context, *SQLRequest) (*SQLResponse, error)
	SubmitAlertRequest(context.Context, *AlertRequest) (*RegisteredAlert, error)
	DeleteAlertRequest(context.Context, *RegisteredAlert) (*Empty, error)
	CreateSource(context.Context, *Source) (*Empty, error)
	mustEmbedUnimplementedFilterServiceServer()
}

// UnimplementedFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilterServiceServer struct {
}

func (UnimplementedFilterServiceServer) GetFilteredData(context.Context, *FilterRequest) (*FilteredRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredData not implemented")
}
func (UnimplementedFilterServiceServer) SubmitSQL(context.Context, *SQLRequest) (*SQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSQL not implemented")
}
func (UnimplementedFilterServiceServer) SubmitAlertRequest(context.Context, *AlertRequest) (*RegisteredAlert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAlertRequest not implemented")
}
func (UnimplementedFilterServiceServer) DeleteAlertRequest(context.Context, *RegisteredAlert) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertRequest not implemented")
}
func (UnimplementedFilterServiceServer) CreateSource(context.Context, *Source) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (UnimplementedFilterServiceServer) mustEmbedUnimplementedFilterServiceServer() {}

// UnsafeFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilterServiceServer will
// result in compilation errors.
type UnsafeFilterServiceServer interface {
	mustEmbedUnimplementedFilterServiceServer()
}

func RegisterFilterServiceServer(s grpc.ServiceRegistrar, srv FilterServiceServer) {
	s.RegisterService(&FilterService_ServiceDesc, srv)
}

func _FilterService_GetFilteredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).GetFilteredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterService_GetFilteredData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).GetFilteredData(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_SubmitSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).SubmitSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterService_SubmitSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).SubmitSQL(ctx, req.(*SQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_SubmitAlertRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).SubmitAlertRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterService_SubmitAlertRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).SubmitAlertRequest(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_DeleteAlertRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredAlert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).DeleteAlertRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterService_DeleteAlertRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).DeleteAlertRequest(ctx, req.(*RegisteredAlert))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterService_CreateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).CreateSource(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

// FilterService_ServiceDesc is the grpc.ServiceDesc for FilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.logfire.FilterService",
	HandlerType: (*FilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilteredData",
			Handler:    _FilterService_GetFilteredData_Handler,
		},
		{
			MethodName: "SubmitSQL",
			Handler:    _FilterService_SubmitSQL_Handler,
		},
		{
			MethodName: "SubmitAlertRequest",
			Handler:    _FilterService_SubmitAlertRequest_Handler,
		},
		{
			MethodName: "DeleteAlertRequest",
			Handler:    _FilterService_DeleteAlertRequest_Handler,
		},
		{
			MethodName: "CreateSource",
			Handler:    _FilterService_CreateSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flink-service.proto",
}
