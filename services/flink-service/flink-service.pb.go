// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc2
// source: flink-service.proto

package flink_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SeverityLevel int32

const (
	SeverityLevel_INFO          SeverityLevel = 0
	SeverityLevel_TRACE         SeverityLevel = 1
	SeverityLevel_DEBUG         SeverityLevel = 2
	SeverityLevel_WARNING       SeverityLevel = 3
	SeverityLevel_ERROR         SeverityLevel = 4
	SeverityLevel_FATAL         SeverityLevel = 5
	SeverityLevel_INFORMATIONAL SeverityLevel = 6
	SeverityLevel_NOTICE        SeverityLevel = 7
	SeverityLevel_CRITICAL      SeverityLevel = 8
	SeverityLevel_ALERT         SeverityLevel = 9
)

// Enum value maps for SeverityLevel.
var (
	SeverityLevel_name = map[int32]string{
		0: "INFO",
		1: "TRACE",
		2: "DEBUG",
		3: "WARNING",
		4: "ERROR",
		5: "FATAL",
		6: "INFORMATIONAL",
		7: "NOTICE",
		8: "CRITICAL",
		9: "ALERT",
	}
	SeverityLevel_value = map[string]int32{
		"INFO":          0,
		"TRACE":         1,
		"DEBUG":         2,
		"WARNING":       3,
		"ERROR":         4,
		"FATAL":         5,
		"INFORMATIONAL": 6,
		"NOTICE":        7,
		"CRITICAL":      8,
		"ALERT":         9,
	}
)

func (x SeverityLevel) Enum() *SeverityLevel {
	p := new(SeverityLevel)
	*p = x
	return p
}

func (x SeverityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[0].Descriptor()
}

func (SeverityLevel) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[0]
}

func (x SeverityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeverityLevel.Descriptor instead.
func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{0}
}

type FieldBasedFilter_Operator int32

const (
	FieldBasedFilter_CONTAINS            FieldBasedFilter_Operator = 0
	FieldBasedFilter_DOES_NOT_CONTAIN    FieldBasedFilter_Operator = 1
	FieldBasedFilter_EQUALS              FieldBasedFilter_Operator = 2
	FieldBasedFilter_NOT_EQUALS          FieldBasedFilter_Operator = 3
	FieldBasedFilter_GREATER_THAN        FieldBasedFilter_Operator = 4
	FieldBasedFilter_GREATER_THAN_EQUALS FieldBasedFilter_Operator = 5
	FieldBasedFilter_LESS_THAN           FieldBasedFilter_Operator = 6
	FieldBasedFilter_LESS_THAN_EQUALS    FieldBasedFilter_Operator = 7
)

// Enum value maps for FieldBasedFilter_Operator.
var (
	FieldBasedFilter_Operator_name = map[int32]string{
		0: "CONTAINS",
		1: "DOES_NOT_CONTAIN",
		2: "EQUALS",
		3: "NOT_EQUALS",
		4: "GREATER_THAN",
		5: "GREATER_THAN_EQUALS",
		6: "LESS_THAN",
		7: "LESS_THAN_EQUALS",
	}
	FieldBasedFilter_Operator_value = map[string]int32{
		"CONTAINS":            0,
		"DOES_NOT_CONTAIN":    1,
		"EQUALS":              2,
		"NOT_EQUALS":          3,
		"GREATER_THAN":        4,
		"GREATER_THAN_EQUALS": 5,
		"LESS_THAN":           6,
		"LESS_THAN_EQUALS":    7,
	}
)

func (x FieldBasedFilter_Operator) Enum() *FieldBasedFilter_Operator {
	p := new(FieldBasedFilter_Operator)
	*p = x
	return p
}

func (x FieldBasedFilter_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldBasedFilter_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[1].Descriptor()
}

func (FieldBasedFilter_Operator) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[1]
}

func (x FieldBasedFilter_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldBasedFilter_Operator.Descriptor instead.
func (FieldBasedFilter_Operator) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{6, 0}
}

type DateTimeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTimeStamp,proto3" json:"startTimeStamp,omitempty"`
	EndTimeStamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTimeStamp,proto3" json:"endTimeStamp,omitempty"`
}

func (x *DateTimeFilter) Reset() {
	*x = DateTimeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeFilter) ProtoMessage() {}

func (x *DateTimeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeFilter.ProtoReflect.Descriptor instead.
func (*DateTimeFilter) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{0}
}

func (x *DateTimeFilter) GetStartTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeStamp
	}
	return nil
}

func (x *DateTimeFilter) GetEndTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeStamp
	}
	return nil
}

type RecordDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record string `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *RecordDetails) Reset() {
	*x = RecordDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetails) ProtoMessage() {}

func (x *RecordDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetails.ProtoReflect.Descriptor instead.
func (*RecordDetails) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{1}
}

func (x *RecordDetails) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{2}
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceID       string `protobuf:"bytes,1,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	SourceName     string `protobuf:"bytes,2,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
	StartingOffset uint64 `protobuf:"varint,3,opt,name=startingOffset,proto3" json:"startingOffset,omitempty"`
	EndingOffset   uint64 `protobuf:"varint,4,opt,name=endingOffset,proto3" json:"endingOffset,omitempty"`
	TeamID         string `protobuf:"bytes,5,opt,name=teamID,proto3" json:"teamID,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{3}
}

func (x *Source) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *Source) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *Source) GetStartingOffset() uint64 {
	if x != nil {
		return x.StartingOffset
	}
	return 0
}

func (x *Source) GetEndingOffset() uint64 {
	if x != nil {
		return x.EndingOffset
	}
	return 0
}

func (x *Source) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

type FilterCancellationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=jobName,proto3" json:"jobName,omitempty"`
}

func (x *FilterCancellationRequest) Reset() {
	*x = FilterCancellationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCancellationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCancellationRequest) ProtoMessage() {}

func (x *FilterCancellationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCancellationRequest.ProtoReflect.Descriptor instead.
func (*FilterCancellationRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{4}
}

func (x *FilterCancellationRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type FilterCancellationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *FilterCancellationResponse) Reset() {
	*x = FilterCancellationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCancellationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCancellationResponse) ProtoMessage() {}

func (x *FilterCancellationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCancellationResponse.ProtoReflect.Descriptor instead.
func (*FilterCancellationResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{5}
}

func (x *FilterCancellationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FieldBasedFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName  string                    `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	FieldValue string                    `protobuf:"bytes,2,opt,name=fieldValue,proto3" json:"fieldValue,omitempty"`
	Operator   FieldBasedFilter_Operator `protobuf:"varint,3,opt,name=operator,proto3,enum=sh.logfire.FieldBasedFilter_Operator" json:"operator,omitempty"`
}

func (x *FieldBasedFilter) Reset() {
	*x = FieldBasedFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldBasedFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldBasedFilter) ProtoMessage() {}

func (x *FieldBasedFilter) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldBasedFilter.ProtoReflect.Descriptor instead.
func (*FieldBasedFilter) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{6}
}

func (x *FieldBasedFilter) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldBasedFilter) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

func (x *FieldBasedFilter) GetOperator() FieldBasedFilter_Operator {
	if x != nil {
		return x.Operator
	}
	return FieldBasedFilter_CONTAINS
}

type FilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeverityLevels    []SeverityLevel     `protobuf:"varint,1,rep,packed,name=severityLevels,proto3,enum=sh.logfire.SeverityLevel" json:"severityLevels,omitempty"`
	DateTimeFilter    *DateTimeFilter     `protobuf:"bytes,2,opt,name=dateTimeFilter,proto3" json:"dateTimeFilter,omitempty"`
	SearchQueries     []string            `protobuf:"bytes,3,rep,name=searchQueries,proto3" json:"searchQueries,omitempty"`
	SqlQuery          string              `protobuf:"bytes,4,opt,name=sqlQuery,proto3" json:"sqlQuery,omitempty"`
	FieldBasedFilters []*FieldBasedFilter `protobuf:"bytes,5,rep,name=fieldBasedFilters,proto3" json:"fieldBasedFilters,omitempty"`
	Sources           []*Source           `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`
	BatchSize         uint32              `protobuf:"varint,9,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	IsScrollDown      bool                `protobuf:"varint,10,opt,name=isScrollDown,proto3" json:"isScrollDown,omitempty"`
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{7}
}

func (x *FilterRequest) GetSeverityLevels() []SeverityLevel {
	if x != nil {
		return x.SeverityLevels
	}
	return nil
}

func (x *FilterRequest) GetDateTimeFilter() *DateTimeFilter {
	if x != nil {
		return x.DateTimeFilter
	}
	return nil
}

func (x *FilterRequest) GetSearchQueries() []string {
	if x != nil {
		return x.SearchQueries
	}
	return nil
}

func (x *FilterRequest) GetSqlQuery() string {
	if x != nil {
		return x.SqlQuery
	}
	return ""
}

func (x *FilterRequest) GetFieldBasedFilters() []*FieldBasedFilter {
	if x != nil {
		return x.FieldBasedFilters
	}
	return nil
}

func (x *FilterRequest) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *FilterRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *FilterRequest) GetIsScrollDown() bool {
	if x != nil {
		return x.IsScrollDown
	}
	return false
}

type FilteredRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Dt         string `protobuf:"bytes,3,opt,name=dt,proto3" json:"dt,omitempty"`
	Level      string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	SourceName string `protobuf:"bytes,5,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
}

func (x *FilteredRecord) Reset() {
	*x = FilteredRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredRecord) ProtoMessage() {}

func (x *FilteredRecord) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredRecord.ProtoReflect.Descriptor instead.
func (*FilteredRecord) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{8}
}

func (x *FilteredRecord) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilteredRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FilteredRecord) GetDt() string {
	if x != nil {
		return x.Dt
	}
	return ""
}

func (x *FilteredRecord) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *FilteredRecord) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

type FilteredRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records      []*FilteredRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	IsScrollDown bool              `protobuf:"varint,2,opt,name=isScrollDown,proto3" json:"isScrollDown,omitempty"`
	Sources      []*Source         `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *FilteredRecords) Reset() {
	*x = FilteredRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredRecords) ProtoMessage() {}

func (x *FilteredRecords) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredRecords.ProtoReflect.Descriptor instead.
func (*FilteredRecords) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{9}
}

func (x *FilteredRecords) GetRecords() []*FilteredRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *FilteredRecords) GetIsScrollDown() bool {
	if x != nil {
		return x.IsScrollDown
	}
	return false
}

func (x *FilteredRecords) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type FilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record  string `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	JobName string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{10}
}

func (x *FilterResponse) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

func (x *FilterResponse) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type SQLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql            string          `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Sources        []*Source       `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	BatchSize      uint32          `protobuf:"varint,3,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	DateTimeFilter *DateTimeFilter `protobuf:"bytes,4,opt,name=dateTimeFilter,proto3" json:"dateTimeFilter,omitempty"`
}

func (x *SQLRequest) Reset() {
	*x = SQLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLRequest) ProtoMessage() {}

func (x *SQLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLRequest.ProtoReflect.Descriptor instead.
func (*SQLRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{11}
}

func (x *SQLRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SQLRequest) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SQLRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *SQLRequest) GetDateTimeFilter() *DateTimeFilter {
	if x != nil {
		return x.DateTimeFilter
	}
	return nil
}

type SQLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   string  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Source *Source `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SQLResponse) Reset() {
	*x = SQLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLResponse) ProtoMessage() {}

func (x *SQLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLResponse.ProtoReflect.Descriptor instead.
func (*SQLResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{12}
}

func (x *SQLResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SQLResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

var File_flink_service_proto protoreflect.FileDescriptor

var file_flink_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72,
	0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x27, 0x0a, 0x0d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a,
	0x1a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x68, 0x2e,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x07, 0x22, 0x94, 0x03, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x42, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x22,
	0x88, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x64, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x53,
	0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0b, 0x53,
	0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2a, 0x8a, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x09, 0x32, 0xd4, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x69, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x73, 0x68,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66,
	0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53,
	0x51, 0x4c, 0x12, 0x16, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e,
	0x53, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x2e,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x68, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x11, 0x2e, 0x73, 0x68, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x17,
	0x5a, 0x15, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flink_service_proto_rawDescOnce sync.Once
	file_flink_service_proto_rawDescData = file_flink_service_proto_rawDesc
)

func file_flink_service_proto_rawDescGZIP() []byte {
	file_flink_service_proto_rawDescOnce.Do(func() {
		file_flink_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_flink_service_proto_rawDescData)
	})
	return file_flink_service_proto_rawDescData
}

var file_flink_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flink_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_flink_service_proto_goTypes = []interface{}{
	(SeverityLevel)(0),                 // 0: sh.logfire.SeverityLevel
	(FieldBasedFilter_Operator)(0),     // 1: sh.logfire.FieldBasedFilter.Operator
	(*DateTimeFilter)(nil),             // 2: sh.logfire.DateTimeFilter
	(*RecordDetails)(nil),              // 3: sh.logfire.RecordDetails
	(*Empty)(nil),                      // 4: sh.logfire.Empty
	(*Source)(nil),                     // 5: sh.logfire.Source
	(*FilterCancellationRequest)(nil),  // 6: sh.logfire.FilterCancellationRequest
	(*FilterCancellationResponse)(nil), // 7: sh.logfire.FilterCancellationResponse
	(*FieldBasedFilter)(nil),           // 8: sh.logfire.FieldBasedFilter
	(*FilterRequest)(nil),              // 9: sh.logfire.FilterRequest
	(*FilteredRecord)(nil),             // 10: sh.logfire.FilteredRecord
	(*FilteredRecords)(nil),            // 11: sh.logfire.FilteredRecords
	(*FilterResponse)(nil),             // 12: sh.logfire.FilterResponse
	(*SQLRequest)(nil),                 // 13: sh.logfire.SQLRequest
	(*SQLResponse)(nil),                // 14: sh.logfire.SQLResponse
	(*timestamppb.Timestamp)(nil),      // 15: google.protobuf.Timestamp
}
var file_flink_service_proto_depIdxs = []int32{
	15, // 0: sh.logfire.DateTimeFilter.startTimeStamp:type_name -> google.protobuf.Timestamp
	15, // 1: sh.logfire.DateTimeFilter.endTimeStamp:type_name -> google.protobuf.Timestamp
	1,  // 2: sh.logfire.FieldBasedFilter.operator:type_name -> sh.logfire.FieldBasedFilter.Operator
	0,  // 3: sh.logfire.FilterRequest.severityLevels:type_name -> sh.logfire.SeverityLevel
	2,  // 4: sh.logfire.FilterRequest.dateTimeFilter:type_name -> sh.logfire.DateTimeFilter
	8,  // 5: sh.logfire.FilterRequest.fieldBasedFilters:type_name -> sh.logfire.FieldBasedFilter
	5,  // 6: sh.logfire.FilterRequest.sources:type_name -> sh.logfire.Source
	10, // 7: sh.logfire.FilteredRecords.records:type_name -> sh.logfire.FilteredRecord
	5,  // 8: sh.logfire.FilteredRecords.sources:type_name -> sh.logfire.Source
	5,  // 9: sh.logfire.SQLRequest.sources:type_name -> sh.logfire.Source
	2,  // 10: sh.logfire.SQLRequest.dateTimeFilter:type_name -> sh.logfire.DateTimeFilter
	5,  // 11: sh.logfire.SQLResponse.source:type_name -> sh.logfire.Source
	9,  // 12: sh.logfire.FlinkService.GetFilteredData:input_type -> sh.logfire.FilterRequest
	13, // 13: sh.logfire.FlinkService.SubmitSQL:input_type -> sh.logfire.SQLRequest
	5,  // 14: sh.logfire.FlinkService.CreateSource:input_type -> sh.logfire.Source
	11, // 15: sh.logfire.FlinkService.GetFilteredData:output_type -> sh.logfire.FilteredRecords
	14, // 16: sh.logfire.FlinkService.SubmitSQL:output_type -> sh.logfire.SQLResponse
	4,  // 17: sh.logfire.FlinkService.CreateSource:output_type -> sh.logfire.Empty
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_flink_service_proto_init() }
func file_flink_service_proto_init() {
	if File_flink_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flink_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCancellationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCancellationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldBasedFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flink_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flink_service_proto_goTypes,
		DependencyIndexes: file_flink_service_proto_depIdxs,
		EnumInfos:         file_flink_service_proto_enumTypes,
		MessageInfos:      file_flink_service_proto_msgTypes,
	}.Build()
	File_flink_service_proto = out.File
	file_flink_service_proto_rawDesc = nil
	file_flink_service_proto_goTypes = nil
	file_flink_service_proto_depIdxs = nil
}
