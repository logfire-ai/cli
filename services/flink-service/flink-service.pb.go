// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: flink-service.proto

package logfire

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordType int32

const (
	RecordType_TYPE_SOURCE RecordType = 0
	RecordType_TYPE_VIEW   RecordType = 1 // Add more types as needed
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "TYPE_SOURCE",
		1: "TYPE_VIEW",
	}
	RecordType_value = map[string]int32{
		"TYPE_SOURCE": 0,
		"TYPE_VIEW":   1,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[0].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[0]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{0}
}

type SeverityLevel int32

const (
	SeverityLevel_INFO          SeverityLevel = 0
	SeverityLevel_TRACE         SeverityLevel = 1
	SeverityLevel_DEBUG         SeverityLevel = 2
	SeverityLevel_WARNING       SeverityLevel = 3
	SeverityLevel_ERROR         SeverityLevel = 4
	SeverityLevel_FATAL         SeverityLevel = 5
	SeverityLevel_INFORMATIONAL SeverityLevel = 6
	SeverityLevel_NOTICE        SeverityLevel = 7
	SeverityLevel_CRITICAL      SeverityLevel = 8
	SeverityLevel_ALERT         SeverityLevel = 9
)

// Enum value maps for SeverityLevel.
var (
	SeverityLevel_name = map[int32]string{
		0: "INFO",
		1: "TRACE",
		2: "DEBUG",
		3: "WARNING",
		4: "ERROR",
		5: "FATAL",
		6: "INFORMATIONAL",
		7: "NOTICE",
		8: "CRITICAL",
		9: "ALERT",
	}
	SeverityLevel_value = map[string]int32{
		"INFO":          0,
		"TRACE":         1,
		"DEBUG":         2,
		"WARNING":       3,
		"ERROR":         4,
		"FATAL":         5,
		"INFORMATIONAL": 6,
		"NOTICE":        7,
		"CRITICAL":      8,
		"ALERT":         9,
	}
)

func (x SeverityLevel) Enum() *SeverityLevel {
	p := new(SeverityLevel)
	*p = x
	return p
}

func (x SeverityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[1].Descriptor()
}

func (SeverityLevel) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[1]
}

func (x SeverityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeverityLevel.Descriptor instead.
func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{1}
}

type FieldBasedFilter_Operator int32

const (
	FieldBasedFilter_CONTAINS            FieldBasedFilter_Operator = 0
	FieldBasedFilter_DOES_NOT_CONTAIN    FieldBasedFilter_Operator = 1
	FieldBasedFilter_EQUALS              FieldBasedFilter_Operator = 2
	FieldBasedFilter_NOT_EQUALS          FieldBasedFilter_Operator = 3
	FieldBasedFilter_GREATER_THAN        FieldBasedFilter_Operator = 4
	FieldBasedFilter_GREATER_THAN_EQUALS FieldBasedFilter_Operator = 5
	FieldBasedFilter_LESS_THAN           FieldBasedFilter_Operator = 6
	FieldBasedFilter_LESS_THAN_EQUALS    FieldBasedFilter_Operator = 7
)

// Enum value maps for FieldBasedFilter_Operator.
var (
	FieldBasedFilter_Operator_name = map[int32]string{
		0: "CONTAINS",
		1: "DOES_NOT_CONTAIN",
		2: "EQUALS",
		3: "NOT_EQUALS",
		4: "GREATER_THAN",
		5: "GREATER_THAN_EQUALS",
		6: "LESS_THAN",
		7: "LESS_THAN_EQUALS",
	}
	FieldBasedFilter_Operator_value = map[string]int32{
		"CONTAINS":            0,
		"DOES_NOT_CONTAIN":    1,
		"EQUALS":              2,
		"NOT_EQUALS":          3,
		"GREATER_THAN":        4,
		"GREATER_THAN_EQUALS": 5,
		"LESS_THAN":           6,
		"LESS_THAN_EQUALS":    7,
	}
)

func (x FieldBasedFilter_Operator) Enum() *FieldBasedFilter_Operator {
	p := new(FieldBasedFilter_Operator)
	*p = x
	return p
}

func (x FieldBasedFilter_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldBasedFilter_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[2].Descriptor()
}

func (FieldBasedFilter_Operator) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[2]
}

func (x FieldBasedFilter_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldBasedFilter_Operator.Descriptor instead.
func (FieldBasedFilter_Operator) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{20, 0}
}

type StructuredAlertRequest_AlertWhen int32

const (
	StructuredAlertRequest_EQUALS              StructuredAlertRequest_AlertWhen = 0
	StructuredAlertRequest_NOT_EQUALS          StructuredAlertRequest_AlertWhen = 1
	StructuredAlertRequest_GREATER_THAN        StructuredAlertRequest_AlertWhen = 2
	StructuredAlertRequest_GREATER_THAN_EQUALS StructuredAlertRequest_AlertWhen = 3
	StructuredAlertRequest_LESS_THAN           StructuredAlertRequest_AlertWhen = 4
	StructuredAlertRequest_LESS_THAN_EQUALS    StructuredAlertRequest_AlertWhen = 5
)

// Enum value maps for StructuredAlertRequest_AlertWhen.
var (
	StructuredAlertRequest_AlertWhen_name = map[int32]string{
		0: "EQUALS",
		1: "NOT_EQUALS",
		2: "GREATER_THAN",
		3: "GREATER_THAN_EQUALS",
		4: "LESS_THAN",
		5: "LESS_THAN_EQUALS",
	}
	StructuredAlertRequest_AlertWhen_value = map[string]int32{
		"EQUALS":              0,
		"NOT_EQUALS":          1,
		"GREATER_THAN":        2,
		"GREATER_THAN_EQUALS": 3,
		"LESS_THAN":           4,
		"LESS_THAN_EQUALS":    5,
	}
)

func (x StructuredAlertRequest_AlertWhen) Enum() *StructuredAlertRequest_AlertWhen {
	p := new(StructuredAlertRequest_AlertWhen)
	*p = x
	return p
}

func (x StructuredAlertRequest_AlertWhen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructuredAlertRequest_AlertWhen) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[3].Descriptor()
}

func (StructuredAlertRequest_AlertWhen) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[3]
}

func (x StructuredAlertRequest_AlertWhen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructuredAlertRequest_AlertWhen.Descriptor instead.
func (StructuredAlertRequest_AlertWhen) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{30, 0}
}

type StructuredAlertRequest_Aggregation_AggregationFunction int32

const (
	StructuredAlertRequest_Aggregation_COUNT                         StructuredAlertRequest_Aggregation_AggregationFunction = 0
	StructuredAlertRequest_Aggregation_DISTINCT                      StructuredAlertRequest_Aggregation_AggregationFunction = 1
	StructuredAlertRequest_Aggregation_SUM                           StructuredAlertRequest_Aggregation_AggregationFunction = 2
	StructuredAlertRequest_Aggregation_MIN                           StructuredAlertRequest_Aggregation_AggregationFunction = 3
	StructuredAlertRequest_Aggregation_AVG                           StructuredAlertRequest_Aggregation_AggregationFunction = 4
	StructuredAlertRequest_Aggregation_FIRST_VALUE                   StructuredAlertRequest_Aggregation_AggregationFunction = 5
	StructuredAlertRequest_Aggregation_LAST_VALUE                    StructuredAlertRequest_Aggregation_AggregationFunction = 6
	StructuredAlertRequest_Aggregation_VARIANCE_POPULATION           StructuredAlertRequest_Aggregation_AggregationFunction = 7
	StructuredAlertRequest_Aggregation_VARIANCE_SAMPLE               StructuredAlertRequest_Aggregation_AggregationFunction = 8
	StructuredAlertRequest_Aggregation_STANDARD_DEVIATION_SAMPLE     StructuredAlertRequest_Aggregation_AggregationFunction = 9
	StructuredAlertRequest_Aggregation_STANDARD_DEVIATION_POPULATION StructuredAlertRequest_Aggregation_AggregationFunction = 10
)

// Enum value maps for StructuredAlertRequest_Aggregation_AggregationFunction.
var (
	StructuredAlertRequest_Aggregation_AggregationFunction_name = map[int32]string{
		0:  "COUNT",
		1:  "DISTINCT",
		2:  "SUM",
		3:  "MIN",
		4:  "AVG",
		5:  "FIRST_VALUE",
		6:  "LAST_VALUE",
		7:  "VARIANCE_POPULATION",
		8:  "VARIANCE_SAMPLE",
		9:  "STANDARD_DEVIATION_SAMPLE",
		10: "STANDARD_DEVIATION_POPULATION",
	}
	StructuredAlertRequest_Aggregation_AggregationFunction_value = map[string]int32{
		"COUNT":                         0,
		"DISTINCT":                      1,
		"SUM":                           2,
		"MIN":                           3,
		"AVG":                           4,
		"FIRST_VALUE":                   5,
		"LAST_VALUE":                    6,
		"VARIANCE_POPULATION":           7,
		"VARIANCE_SAMPLE":               8,
		"STANDARD_DEVIATION_SAMPLE":     9,
		"STANDARD_DEVIATION_POPULATION": 10,
	}
)

func (x StructuredAlertRequest_Aggregation_AggregationFunction) Enum() *StructuredAlertRequest_Aggregation_AggregationFunction {
	p := new(StructuredAlertRequest_Aggregation_AggregationFunction)
	*p = x
	return p
}

func (x StructuredAlertRequest_Aggregation_AggregationFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructuredAlertRequest_Aggregation_AggregationFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[4].Descriptor()
}

func (StructuredAlertRequest_Aggregation_AggregationFunction) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[4]
}

func (x StructuredAlertRequest_Aggregation_AggregationFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructuredAlertRequest_Aggregation_AggregationFunction.Descriptor instead.
func (StructuredAlertRequest_Aggregation_AggregationFunction) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{30, 0, 0}
}

type AlertActions_WebhookAction_HttpMethod int32

const (
	AlertActions_WebhookAction_POST  AlertActions_WebhookAction_HttpMethod = 0
	AlertActions_WebhookAction_HEAD  AlertActions_WebhookAction_HttpMethod = 1
	AlertActions_WebhookAction_GET   AlertActions_WebhookAction_HttpMethod = 2
	AlertActions_WebhookAction_PUT   AlertActions_WebhookAction_HttpMethod = 3
	AlertActions_WebhookAction_PATCH AlertActions_WebhookAction_HttpMethod = 4
)

// Enum value maps for AlertActions_WebhookAction_HttpMethod.
var (
	AlertActions_WebhookAction_HttpMethod_name = map[int32]string{
		0: "POST",
		1: "HEAD",
		2: "GET",
		3: "PUT",
		4: "PATCH",
	}
	AlertActions_WebhookAction_HttpMethod_value = map[string]int32{
		"POST":  0,
		"HEAD":  1,
		"GET":   2,
		"PUT":   3,
		"PATCH": 4,
	}
)

func (x AlertActions_WebhookAction_HttpMethod) Enum() *AlertActions_WebhookAction_HttpMethod {
	p := new(AlertActions_WebhookAction_HttpMethod)
	*p = x
	return p
}

func (x AlertActions_WebhookAction_HttpMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertActions_WebhookAction_HttpMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_flink_service_proto_enumTypes[5].Descriptor()
}

func (AlertActions_WebhookAction_HttpMethod) Type() protoreflect.EnumType {
	return &file_flink_service_proto_enumTypes[5]
}

func (x AlertActions_WebhookAction_HttpMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertActions_WebhookAction_HttpMethod.Descriptor instead.
func (AlertActions_WebhookAction_HttpMethod) EnumDescriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{31, 0, 0}
}

type OffsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID string     `protobuf:"bytes,1,opt,name=teamID,proto3" json:"teamID,omitempty"`
	IDs    []string   `protobuf:"bytes,2,rep,name=IDs,proto3" json:"IDs,omitempty"`
	Type   RecordType `protobuf:"varint,3,opt,name=type,proto3,enum=ai.logfire.RecordType" json:"type,omitempty"`
}

func (x *OffsetRequest) Reset() {
	*x = OffsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetRequest) ProtoMessage() {}

func (x *OffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetRequest.ProtoReflect.Descriptor instead.
func (*OffsetRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{0}
}

func (x *OffsetRequest) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

func (x *OffsetRequest) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *OffsetRequest) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_TYPE_SOURCE
}

type OffsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetRecords []*OffsetRecord `protobuf:"bytes,1,rep,name=offsetRecords,proto3" json:"offsetRecords,omitempty"`
	Type          RecordType      `protobuf:"varint,3,opt,name=type,proto3,enum=ai.logfire.RecordType" json:"type,omitempty"`
}

func (x *OffsetResponse) Reset() {
	*x = OffsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetResponse) ProtoMessage() {}

func (x *OffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetResponse.ProtoReflect.Descriptor instead.
func (*OffsetResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{1}
}

func (x *OffsetResponse) GetOffsetRecords() []*OffsetRecord {
	if x != nil {
		return x.OffsetRecords
	}
	return nil
}

func (x *OffsetResponse) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_TYPE_SOURCE
}

type OffsetRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MaxOffset int64  `protobuf:"varint,2,opt,name=maxOffset,proto3" json:"maxOffset,omitempty"`
	MinOffset int64  `protobuf:"varint,3,opt,name=minOffset,proto3" json:"minOffset,omitempty"`
}

func (x *OffsetRecord) Reset() {
	*x = OffsetRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetRecord) ProtoMessage() {}

func (x *OffsetRecord) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetRecord.ProtoReflect.Descriptor instead.
func (*OffsetRecord) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{2}
}

func (x *OffsetRecord) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OffsetRecord) GetMaxOffset() int64 {
	if x != nil {
		return x.MaxOffset
	}
	return 0
}

func (x *OffsetRecord) GetMinOffset() int64 {
	if x != nil {
		return x.MinOffset
	}
	return 0
}

type SendNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification string `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	ProfileID    string `protobuf:"bytes,2,opt,name=profileID,proto3" json:"profileID,omitempty"`
}

func (x *SendNotificationRequest) Reset() {
	*x = SendNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNotificationRequest) ProtoMessage() {}

func (x *SendNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNotificationRequest.ProtoReflect.Descriptor instead.
func (*SendNotificationRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{3}
}

func (x *SendNotificationRequest) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *SendNotificationRequest) GetProfileID() string {
	if x != nil {
		return x.ProfileID
	}
	return ""
}

type SendNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`       // Could be a message like "Success" or "Failed"
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Time when the notification was processed
}

func (x *SendNotificationResponse) Reset() {
	*x = SendNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNotificationResponse) ProtoMessage() {}

func (x *SendNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNotificationResponse.ProtoReflect.Descriptor instead.
func (*SendNotificationResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{4}
}

func (x *SendNotificationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SendNotificationResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ReceiveNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification string                 `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Time when the notification was sent
}

func (x *ReceiveNotificationResponse) Reset() {
	*x = ReceiveNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveNotificationResponse) ProtoMessage() {}

func (x *ReceiveNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveNotificationResponse.ProtoReflect.Descriptor instead.
func (*ReceiveNotificationResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{5}
}

func (x *ReceiveNotificationResponse) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *ReceiveNotificationResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ReceiveNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileID string `protobuf:"bytes,1,opt,name=profileID,proto3" json:"profileID,omitempty"`
}

func (x *ReceiveNotificationRequest) Reset() {
	*x = ReceiveNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveNotificationRequest) ProtoMessage() {}

func (x *ReceiveNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveNotificationRequest.ProtoReflect.Descriptor instead.
func (*ReceiveNotificationRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{6}
}

func (x *ReceiveNotificationRequest) GetProfileID() string {
	if x != nil {
		return x.ProfileID
	}
	return ""
}

type GraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID            string              `protobuf:"bytes,1,opt,name=teamID,proto3" json:"teamID,omitempty"`
	AccountID         string              `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Sources           []*Source           `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	DateTimeFilter    *DateTimeFilter     `protobuf:"bytes,4,opt,name=dateTimeFilter,proto3" json:"dateTimeFilter,omitempty"`
	FieldBasedFilters []*FieldBasedFilter `protobuf:"bytes,5,rep,name=fieldBasedFilters,proto3" json:"fieldBasedFilters,omitempty"`
}

func (x *GraphRequest) Reset() {
	*x = GraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphRequest) ProtoMessage() {}

func (x *GraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphRequest.ProtoReflect.Descriptor instead.
func (*GraphRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{7}
}

func (x *GraphRequest) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

func (x *GraphRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GraphRequest) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *GraphRequest) GetDateTimeFilter() *DateTimeFilter {
	if x != nil {
		return x.DateTimeFilter
	}
	return nil
}

func (x *GraphRequest) GetFieldBasedFilters() []*FieldBasedFilter {
	if x != nil {
		return x.FieldBasedFilters
	}
	return nil
}

type GraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta string `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GraphResponse) Reset() {
	*x = GraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphResponse) ProtoMessage() {}

func (x *GraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphResponse.ProtoReflect.Descriptor instead.
func (*GraphResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{8}
}

func (x *GraphResponse) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

type RegisteredAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertID string `protobuf:"bytes,1,opt,name=alertID,proto3" json:"alertID,omitempty"`
}

func (x *RegisteredAlert) Reset() {
	*x = RegisteredAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredAlert) ProtoMessage() {}

func (x *RegisteredAlert) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredAlert.ProtoReflect.Descriptor instead.
func (*RegisteredAlert) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{9}
}

func (x *RegisteredAlert) GetAlertID() string {
	if x != nil {
		return x.AlertID
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{10}
}

type SourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	LatestTimestamp *string `protobuf:"bytes,2,opt,name=latestTimestamp,proto3,oneof" json:"latestTimestamp,omitempty"`
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{11}
}

func (x *SourceInfo) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SourceInfo) GetLatestTimestamp() string {
	if x != nil && x.LatestTimestamp != nil {
		return *x.LatestTimestamp
	}
	return ""
}

type SQLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql            string          `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Sources        []*Source       `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	BatchSize      uint32          `protobuf:"varint,3,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	DateTimeFilter *DateTimeFilter `protobuf:"bytes,4,opt,name=dateTimeFilter,proto3" json:"dateTimeFilter,omitempty"`
	TeamID         string          `protobuf:"bytes,5,opt,name=teamID,proto3" json:"teamID,omitempty"`
	TotalCount     uint32          `protobuf:"varint,6,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	PerPage        uint32          `protobuf:"varint,7,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *SQLRequest) Reset() {
	*x = SQLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLRequest) ProtoMessage() {}

func (x *SQLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLRequest.ProtoReflect.Descriptor instead.
func (*SQLRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{12}
}

func (x *SQLRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SQLRequest) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SQLRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *SQLRequest) GetDateTimeFilter() *DateTimeFilter {
	if x != nil {
		return x.DateTimeFilter
	}
	return nil
}

func (x *SQLRequest) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

func (x *SQLRequest) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *SQLRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type SQLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       string  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Source     *Source `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	TotalCount uint32  `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	PerPage    uint32  `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	HasNext    bool    `protobuf:"varint,5,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
}

func (x *SQLResponse) Reset() {
	*x = SQLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLResponse) ProtoMessage() {}

func (x *SQLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLResponse.ProtoReflect.Descriptor instead.
func (*SQLResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{13}
}

func (x *SQLResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SQLResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SQLResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *SQLResponse) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *SQLResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type RecordDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceName string `protobuf:"bytes,1,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
	Offset     uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	SourceID   string `protobuf:"bytes,4,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	TeamID     string `protobuf:"bytes,5,opt,name=teamID,proto3" json:"teamID,omitempty"`
}

func (x *RecordDetailsRequest) Reset() {
	*x = RecordDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetailsRequest) ProtoMessage() {}

func (x *RecordDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetailsRequest.ProtoReflect.Descriptor instead.
func (*RecordDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{14}
}

func (x *RecordDetailsRequest) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *RecordDetailsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RecordDetailsRequest) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *RecordDetailsRequest) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

type DateTimeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTimeStamp,proto3" json:"startTimeStamp,omitempty"`
	EndTimeStamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTimeStamp,proto3" json:"endTimeStamp,omitempty"`
}

func (x *DateTimeFilter) Reset() {
	*x = DateTimeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeFilter) ProtoMessage() {}

func (x *DateTimeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeFilter.ProtoReflect.Descriptor instead.
func (*DateTimeFilter) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{15}
}

func (x *DateTimeFilter) GetStartTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeStamp
	}
	return nil
}

func (x *DateTimeFilter) GetEndTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeStamp
	}
	return nil
}

type RecordDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record string `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *RecordDetails) Reset() {
	*x = RecordDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetails) ProtoMessage() {}

func (x *RecordDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetails.ProtoReflect.Descriptor instead.
func (*RecordDetails) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{16}
}

func (x *RecordDetails) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceID       string `protobuf:"bytes,1,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	SourceName     string `protobuf:"bytes,2,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
	StartingOffset uint64 `protobuf:"varint,3,opt,name=startingOffset,proto3" json:"startingOffset,omitempty"`
	EndingOffset   uint64 `protobuf:"varint,4,opt,name=endingOffset,proto3" json:"endingOffset,omitempty"`
	TeamID         string `protobuf:"bytes,5,opt,name=teamID,proto3" json:"teamID,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{17}
}

func (x *Source) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *Source) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *Source) GetStartingOffset() uint64 {
	if x != nil {
		return x.StartingOffset
	}
	return 0
}

func (x *Source) GetEndingOffset() uint64 {
	if x != nil {
		return x.EndingOffset
	}
	return 0
}

func (x *Source) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

type FilterCancellationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName string `protobuf:"bytes,1,opt,name=jobName,proto3" json:"jobName,omitempty"`
}

func (x *FilterCancellationRequest) Reset() {
	*x = FilterCancellationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCancellationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCancellationRequest) ProtoMessage() {}

func (x *FilterCancellationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCancellationRequest.ProtoReflect.Descriptor instead.
func (*FilterCancellationRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{18}
}

func (x *FilterCancellationRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type FilterCancellationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *FilterCancellationResponse) Reset() {
	*x = FilterCancellationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCancellationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCancellationResponse) ProtoMessage() {}

func (x *FilterCancellationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCancellationResponse.ProtoReflect.Descriptor instead.
func (*FilterCancellationResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{19}
}

func (x *FilterCancellationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FieldBasedFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName  string                    `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	FieldValue string                    `protobuf:"bytes,2,opt,name=fieldValue,proto3" json:"fieldValue,omitempty"`
	Operator   FieldBasedFilter_Operator `protobuf:"varint,3,opt,name=operator,proto3,enum=ai.logfire.FieldBasedFilter_Operator" json:"operator,omitempty"`
}

func (x *FieldBasedFilter) Reset() {
	*x = FieldBasedFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldBasedFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldBasedFilter) ProtoMessage() {}

func (x *FieldBasedFilter) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldBasedFilter.ProtoReflect.Descriptor instead.
func (*FieldBasedFilter) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{20}
}

func (x *FieldBasedFilter) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldBasedFilter) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

func (x *FieldBasedFilter) GetOperator() FieldBasedFilter_Operator {
	if x != nil {
		return x.Operator
	}
	return FieldBasedFilter_CONTAINS
}

type FilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID            string              `protobuf:"bytes,1,opt,name=teamID,proto3" json:"teamID,omitempty"`
	AccountID         string              `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ViewID            string              `protobuf:"bytes,3,opt,name=viewID,proto3" json:"viewID,omitempty"`
	DateTimeFilter    *DateTimeFilter     `protobuf:"bytes,4,opt,name=dateTimeFilter,proto3" json:"dateTimeFilter,omitempty"`
	SqlQuery          string              `protobuf:"bytes,5,opt,name=sqlQuery,proto3" json:"sqlQuery,omitempty"`
	FieldBasedFilters []*FieldBasedFilter `protobuf:"bytes,6,rep,name=fieldBasedFilters,proto3" json:"fieldBasedFilters,omitempty"`
	Sources           []*Source           `protobuf:"bytes,7,rep,name=sources,proto3" json:"sources,omitempty"`
	BatchSize         uint32              `protobuf:"varint,8,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	IsScrollDown      bool                `protobuf:"varint,9,opt,name=isScrollDown,proto3" json:"isScrollDown,omitempty"`
	SearchQueries     []string            `protobuf:"bytes,10,rep,name=searchQueries,proto3" json:"searchQueries,omitempty"`
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{21}
}

func (x *FilterRequest) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

func (x *FilterRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *FilterRequest) GetViewID() string {
	if x != nil {
		return x.ViewID
	}
	return ""
}

func (x *FilterRequest) GetDateTimeFilter() *DateTimeFilter {
	if x != nil {
		return x.DateTimeFilter
	}
	return nil
}

func (x *FilterRequest) GetSqlQuery() string {
	if x != nil {
		return x.SqlQuery
	}
	return ""
}

func (x *FilterRequest) GetFieldBasedFilters() []*FieldBasedFilter {
	if x != nil {
		return x.FieldBasedFilters
	}
	return nil
}

func (x *FilterRequest) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *FilterRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *FilterRequest) GetIsScrollDown() bool {
	if x != nil {
		return x.IsScrollDown
	}
	return false
}

func (x *FilterRequest) GetSearchQueries() []string {
	if x != nil {
		return x.SearchQueries
	}
	return nil
}

type FilteredRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Dt         string `protobuf:"bytes,3,opt,name=dt,proto3" json:"dt,omitempty"`
	Level      string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	SourceName string `protobuf:"bytes,5,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
	SourceID   string `protobuf:"bytes,6,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
}

func (x *FilteredRecord) Reset() {
	*x = FilteredRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredRecord) ProtoMessage() {}

func (x *FilteredRecord) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredRecord.ProtoReflect.Descriptor instead.
func (*FilteredRecord) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{22}
}

func (x *FilteredRecord) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilteredRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FilteredRecord) GetDt() string {
	if x != nil {
		return x.Dt
	}
	return ""
}

func (x *FilteredRecord) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *FilteredRecord) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *FilteredRecord) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

type FilteredRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records      []*FilteredRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	IsScrollDown bool              `protobuf:"varint,2,opt,name=isScrollDown,proto3" json:"isScrollDown,omitempty"`
	Sources      []*Source         `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *FilteredRecords) Reset() {
	*x = FilteredRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredRecords) ProtoMessage() {}

func (x *FilteredRecords) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredRecords.ProtoReflect.Descriptor instead.
func (*FilteredRecords) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{23}
}

func (x *FilteredRecords) GetRecords() []*FilteredRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *FilteredRecords) GetIsScrollDown() bool {
	if x != nil {
		return x.IsScrollDown
	}
	return false
}

func (x *FilteredRecords) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type FilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record  string `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	JobName string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{24}
}

func (x *FilterResponse) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

func (x *FilterResponse) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type AlertJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertRequests []*AlertRequest `protobuf:"bytes,1,rep,name=alertRequests,proto3" json:"alertRequests,omitempty"`
}

func (x *AlertJob) Reset() {
	*x = AlertJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertJob) ProtoMessage() {}

func (x *AlertJob) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertJob.ProtoReflect.Descriptor instead.
func (*AlertJob) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{25}
}

func (x *AlertJob) GetAlertRequests() []*AlertRequest {
	if x != nil {
		return x.AlertRequests
	}
	return nil
}

type AlertDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AlertSeverity SeverityLevel `protobuf:"varint,3,opt,name=alertSeverity,proto3,enum=ai.logfire.SeverityLevel" json:"alertSeverity,omitempty"`
	AlertLabels   []string      `protobuf:"bytes,4,rep,name=alertLabels,proto3" json:"alertLabels,omitempty"`
	Runbook       string        `protobuf:"bytes,5,opt,name=runbook,proto3" json:"runbook,omitempty"`
}

func (x *AlertDetails) Reset() {
	*x = AlertDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertDetails) ProtoMessage() {}

func (x *AlertDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertDetails.ProtoReflect.Descriptor instead.
func (*AlertDetails) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{26}
}

func (x *AlertDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlertDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AlertDetails) GetAlertSeverity() SeverityLevel {
	if x != nil {
		return x.AlertSeverity
	}
	return SeverityLevel_INFO
}

func (x *AlertDetails) GetAlertLabels() []string {
	if x != nil {
		return x.AlertLabels
	}
	return nil
}

func (x *AlertDetails) GetRunbook() string {
	if x != nil {
		return x.Runbook
	}
	return ""
}

type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WindowType:
	//
	//	*Window_TumblingWindow_
	WindowType isWindow_WindowType `protobuf_oneof:"windowType"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{27}
}

func (m *Window) GetWindowType() isWindow_WindowType {
	if m != nil {
		return m.WindowType
	}
	return nil
}

func (x *Window) GetTumblingWindow() *Window_TumblingWindow {
	if x, ok := x.GetWindowType().(*Window_TumblingWindow_); ok {
		return x.TumblingWindow
	}
	return nil
}

type isWindow_WindowType interface {
	isWindow_WindowType()
}

type Window_TumblingWindow_ struct {
	TumblingWindow *Window_TumblingWindow `protobuf:"bytes,1,opt,name=tumblingWindow,proto3,oneof"`
}

func (*Window_TumblingWindow_) isWindow_WindowType() {}

type ViewBasedAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources                 []*Source           `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	FieldBasedFilters       []*FieldBasedFilter `protobuf:"bytes,2,rep,name=fieldBasedFilters,proto3" json:"fieldBasedFilters,omitempty"`
	AlertWhenHasMoreRecords bool                `protobuf:"varint,3,opt,name=alertWhenHasMoreRecords,proto3" json:"alertWhenHasMoreRecords,omitempty"`
	NumberOfRecords         uint32              `protobuf:"varint,4,opt,name=numberOfRecords,proto3" json:"numberOfRecords,omitempty"`
	WithinSeconds           uint32              `protobuf:"varint,5,opt,name=withinSeconds,proto3" json:"withinSeconds,omitempty"`
	AlertId                 string              `protobuf:"bytes,6,opt,name=alertId,proto3" json:"alertId,omitempty"`
	AlertSeverity           SeverityLevel       `protobuf:"varint,7,opt,name=alertSeverity,proto3,enum=ai.logfire.SeverityLevel" json:"alertSeverity,omitempty"`
}

func (x *ViewBasedAlertRequest) Reset() {
	*x = ViewBasedAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewBasedAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewBasedAlertRequest) ProtoMessage() {}

func (x *ViewBasedAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewBasedAlertRequest.ProtoReflect.Descriptor instead.
func (*ViewBasedAlertRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{28}
}

func (x *ViewBasedAlertRequest) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ViewBasedAlertRequest) GetFieldBasedFilters() []*FieldBasedFilter {
	if x != nil {
		return x.FieldBasedFilters
	}
	return nil
}

func (x *ViewBasedAlertRequest) GetAlertWhenHasMoreRecords() bool {
	if x != nil {
		return x.AlertWhenHasMoreRecords
	}
	return false
}

func (x *ViewBasedAlertRequest) GetNumberOfRecords() uint32 {
	if x != nil {
		return x.NumberOfRecords
	}
	return 0
}

func (x *ViewBasedAlertRequest) GetWithinSeconds() uint32 {
	if x != nil {
		return x.WithinSeconds
	}
	return 0
}

func (x *ViewBasedAlertRequest) GetAlertId() string {
	if x != nil {
		return x.AlertId
	}
	return ""
}

func (x *ViewBasedAlertRequest) GetAlertSeverity() SeverityLevel {
	if x != nil {
		return x.AlertSeverity
	}
	return SeverityLevel_INFO
}

type CEPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionBy               string              `protobuf:"bytes,1,opt,name=partitionBy,proto3" json:"partitionBy,omitempty"`
	WithinIntervalSeconds     uint64              `protobuf:"varint,2,opt,name=withinIntervalSeconds,proto3" json:"withinIntervalSeconds,omitempty"`
	Measures                  string              `protobuf:"bytes,3,opt,name=measures,proto3" json:"measures,omitempty"`
	AfterMatchSkip            string              `protobuf:"bytes,4,opt,name=afterMatchSkip,proto3" json:"afterMatchSkip,omitempty"`
	Pattern                   string              `protobuf:"bytes,5,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Define                    string              `protobuf:"bytes,6,opt,name=define,proto3" json:"define,omitempty"`
	Source                    *Source             `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	FieldBasedFilters         []*FieldBasedFilter `protobuf:"bytes,8,rep,name=fieldBasedFilters,proto3" json:"fieldBasedFilters,omitempty"`
	FieldBasedFiltersAfterCep []*FieldBasedFilter `protobuf:"bytes,9,rep,name=fieldBasedFiltersAfterCep,proto3" json:"fieldBasedFiltersAfterCep,omitempty"`
}

func (x *CEPRequest) Reset() {
	*x = CEPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEPRequest) ProtoMessage() {}

func (x *CEPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEPRequest.ProtoReflect.Descriptor instead.
func (*CEPRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{29}
}

func (x *CEPRequest) GetPartitionBy() string {
	if x != nil {
		return x.PartitionBy
	}
	return ""
}

func (x *CEPRequest) GetWithinIntervalSeconds() uint64 {
	if x != nil {
		return x.WithinIntervalSeconds
	}
	return 0
}

func (x *CEPRequest) GetMeasures() string {
	if x != nil {
		return x.Measures
	}
	return ""
}

func (x *CEPRequest) GetAfterMatchSkip() string {
	if x != nil {
		return x.AfterMatchSkip
	}
	return ""
}

func (x *CEPRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *CEPRequest) GetDefine() string {
	if x != nil {
		return x.Define
	}
	return ""
}

func (x *CEPRequest) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CEPRequest) GetFieldBasedFilters() []*FieldBasedFilter {
	if x != nil {
		return x.FieldBasedFilters
	}
	return nil
}

func (x *CEPRequest) GetFieldBasedFiltersAfterCep() []*FieldBasedFilter {
	if x != nil {
		return x.FieldBasedFiltersAfterCep
	}
	return nil
}

type StructuredAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldBasedFilters  []*FieldBasedFilter                 `protobuf:"bytes,1,rep,name=fieldBasedFilters,proto3" json:"fieldBasedFilters,omitempty"`
	AlertWhen          StructuredAlertRequest_AlertWhen    `protobuf:"varint,2,opt,name=alertWhen,proto3,enum=ai.logfire.StructuredAlertRequest_AlertWhen" json:"alertWhen,omitempty"`
	AlertValue         float64                             `protobuf:"fixed64,3,opt,name=alertValue,proto3" json:"alertValue,omitempty"`
	AggregationRequest *StructuredAlertRequest_Aggregation `protobuf:"bytes,4,opt,name=aggregationRequest,proto3" json:"aggregationRequest,omitempty"`
	Window             *Window                             `protobuf:"bytes,5,opt,name=window,proto3" json:"window,omitempty"`
	Source             *Source                             `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *StructuredAlertRequest) Reset() {
	*x = StructuredAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredAlertRequest) ProtoMessage() {}

func (x *StructuredAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredAlertRequest.ProtoReflect.Descriptor instead.
func (*StructuredAlertRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{30}
}

func (x *StructuredAlertRequest) GetFieldBasedFilters() []*FieldBasedFilter {
	if x != nil {
		return x.FieldBasedFilters
	}
	return nil
}

func (x *StructuredAlertRequest) GetAlertWhen() StructuredAlertRequest_AlertWhen {
	if x != nil {
		return x.AlertWhen
	}
	return StructuredAlertRequest_EQUALS
}

func (x *StructuredAlertRequest) GetAlertValue() float64 {
	if x != nil {
		return x.AlertValue
	}
	return 0
}

func (x *StructuredAlertRequest) GetAggregationRequest() *StructuredAlertRequest_Aggregation {
	if x != nil {
		return x.AggregationRequest
	}
	return nil
}

func (x *StructuredAlertRequest) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *StructuredAlertRequest) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type AlertActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActionType:
	//
	//	*AlertActions_WebhookAction_
	ActionType isAlertActions_ActionType `protobuf_oneof:"actionType"`
}

func (x *AlertActions) Reset() {
	*x = AlertActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertActions) ProtoMessage() {}

func (x *AlertActions) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertActions.ProtoReflect.Descriptor instead.
func (*AlertActions) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{31}
}

func (m *AlertActions) GetActionType() isAlertActions_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (x *AlertActions) GetWebhookAction() *AlertActions_WebhookAction {
	if x, ok := x.GetActionType().(*AlertActions_WebhookAction_); ok {
		return x.WebhookAction
	}
	return nil
}

type isAlertActions_ActionType interface {
	isAlertActions_ActionType()
}

type AlertActions_WebhookAction_ struct {
	WebhookAction *AlertActions_WebhookAction `protobuf:"bytes,1,opt,name=webhookAction,proto3,oneof"`
}

func (*AlertActions_WebhookAction_) isAlertActions_ActionType() {}

type AlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *AlertDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Types that are assignable to AlertQueryType:
	//
	//	*AlertRequest_StructuredAlertRequest
	//	*AlertRequest_CepRequest
	//	*AlertRequest_ViewBasedAlertRequest
	AlertQueryType isAlertRequest_AlertQueryType `protobuf_oneof:"alertQueryType"`
	AlertId        string                        `protobuf:"bytes,5,opt,name=alertId,proto3" json:"alertId,omitempty"`
}

func (x *AlertRequest) Reset() {
	*x = AlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRequest) ProtoMessage() {}

func (x *AlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRequest.ProtoReflect.Descriptor instead.
func (*AlertRequest) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{32}
}

func (x *AlertRequest) GetDetails() *AlertDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (m *AlertRequest) GetAlertQueryType() isAlertRequest_AlertQueryType {
	if m != nil {
		return m.AlertQueryType
	}
	return nil
}

func (x *AlertRequest) GetStructuredAlertRequest() *StructuredAlertRequest {
	if x, ok := x.GetAlertQueryType().(*AlertRequest_StructuredAlertRequest); ok {
		return x.StructuredAlertRequest
	}
	return nil
}

func (x *AlertRequest) GetCepRequest() *CEPRequest {
	if x, ok := x.GetAlertQueryType().(*AlertRequest_CepRequest); ok {
		return x.CepRequest
	}
	return nil
}

func (x *AlertRequest) GetViewBasedAlertRequest() *ViewBasedAlertRequest {
	if x, ok := x.GetAlertQueryType().(*AlertRequest_ViewBasedAlertRequest); ok {
		return x.ViewBasedAlertRequest
	}
	return nil
}

func (x *AlertRequest) GetAlertId() string {
	if x != nil {
		return x.AlertId
	}
	return ""
}

type isAlertRequest_AlertQueryType interface {
	isAlertRequest_AlertQueryType()
}

type AlertRequest_StructuredAlertRequest struct {
	StructuredAlertRequest *StructuredAlertRequest `protobuf:"bytes,2,opt,name=structuredAlertRequest,proto3,oneof"`
}

type AlertRequest_CepRequest struct {
	CepRequest *CEPRequest `protobuf:"bytes,3,opt,name=cepRequest,proto3,oneof"`
}

type AlertRequest_ViewBasedAlertRequest struct {
	ViewBasedAlertRequest *ViewBasedAlertRequest `protobuf:"bytes,4,opt,name=viewBasedAlertRequest,proto3,oneof"`
}

func (*AlertRequest_StructuredAlertRequest) isAlertRequest_AlertQueryType() {}

func (*AlertRequest_CepRequest) isAlertRequest_AlertQueryType() {}

func (*AlertRequest_ViewBasedAlertRequest) isAlertRequest_AlertQueryType() {}

type Window_TumblingWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeIntervalMs uint64 `protobuf:"varint,1,opt,name=timeIntervalMs,proto3" json:"timeIntervalMs,omitempty"`
}

func (x *Window_TumblingWindow) Reset() {
	*x = Window_TumblingWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window_TumblingWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window_TumblingWindow) ProtoMessage() {}

func (x *Window_TumblingWindow) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window_TumblingWindow.ProtoReflect.Descriptor instead.
func (*Window_TumblingWindow) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{27, 0}
}

func (x *Window_TumblingWindow) GetTimeIntervalMs() uint64 {
	if x != nil {
		return x.TimeIntervalMs
	}
	return 0
}

type StructuredAlertRequest_Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName           string                                                 `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	AggregationFunction StructuredAlertRequest_Aggregation_AggregationFunction `protobuf:"varint,2,opt,name=aggregationFunction,proto3,enum=ai.logfire.StructuredAlertRequest_Aggregation_AggregationFunction" json:"aggregationFunction,omitempty"`
}

func (x *StructuredAlertRequest_Aggregation) Reset() {
	*x = StructuredAlertRequest_Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredAlertRequest_Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredAlertRequest_Aggregation) ProtoMessage() {}

func (x *StructuredAlertRequest_Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredAlertRequest_Aggregation.ProtoReflect.Descriptor instead.
func (*StructuredAlertRequest_Aggregation) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{30, 0}
}

func (x *StructuredAlertRequest_Aggregation) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *StructuredAlertRequest_Aggregation) GetAggregationFunction() StructuredAlertRequest_Aggregation_AggregationFunction {
	if x != nil {
		return x.AggregationFunction
	}
	return StructuredAlertRequest_Aggregation_COUNT
}

type AlertActions_WebhookAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                 string                                          `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HttpMethod          AlertActions_WebhookAction_HttpMethod           `protobuf:"varint,3,opt,name=httpMethod,proto3,enum=ai.logfire.AlertActions_WebhookAction_HttpMethod" json:"httpMethod,omitempty"`
	HeaderDetails       []*AlertActions_WebhookAction_HeaderDetails     `protobuf:"bytes,4,rep,name=headerDetails,proto3" json:"headerDetails,omitempty"`
	BasicAuthentication *AlertActions_WebhookAction_BasicAuthentication `protobuf:"bytes,5,opt,name=basicAuthentication,proto3" json:"basicAuthentication,omitempty"`
}

func (x *AlertActions_WebhookAction) Reset() {
	*x = AlertActions_WebhookAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertActions_WebhookAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertActions_WebhookAction) ProtoMessage() {}

func (x *AlertActions_WebhookAction) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertActions_WebhookAction.ProtoReflect.Descriptor instead.
func (*AlertActions_WebhookAction) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{31, 0}
}

func (x *AlertActions_WebhookAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlertActions_WebhookAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AlertActions_WebhookAction) GetHttpMethod() AlertActions_WebhookAction_HttpMethod {
	if x != nil {
		return x.HttpMethod
	}
	return AlertActions_WebhookAction_POST
}

func (x *AlertActions_WebhookAction) GetHeaderDetails() []*AlertActions_WebhookAction_HeaderDetails {
	if x != nil {
		return x.HeaderDetails
	}
	return nil
}

func (x *AlertActions_WebhookAction) GetBasicAuthentication() *AlertActions_WebhookAction_BasicAuthentication {
	if x != nil {
		return x.BasicAuthentication
	}
	return nil
}

type AlertActions_WebhookAction_HeaderDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderName  string `protobuf:"bytes,1,opt,name=headerName,proto3" json:"headerName,omitempty"`
	HeaderValue string `protobuf:"bytes,2,opt,name=headerValue,proto3" json:"headerValue,omitempty"`
}

func (x *AlertActions_WebhookAction_HeaderDetails) Reset() {
	*x = AlertActions_WebhookAction_HeaderDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertActions_WebhookAction_HeaderDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertActions_WebhookAction_HeaderDetails) ProtoMessage() {}

func (x *AlertActions_WebhookAction_HeaderDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertActions_WebhookAction_HeaderDetails.ProtoReflect.Descriptor instead.
func (*AlertActions_WebhookAction_HeaderDetails) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{31, 0, 0}
}

func (x *AlertActions_WebhookAction_HeaderDetails) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *AlertActions_WebhookAction_HeaderDetails) GetHeaderValue() string {
	if x != nil {
		return x.HeaderValue
	}
	return ""
}

type AlertActions_WebhookAction_BasicAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AlertActions_WebhookAction_BasicAuthentication) Reset() {
	*x = AlertActions_WebhookAction_BasicAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flink_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertActions_WebhookAction_BasicAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertActions_WebhookAction_BasicAuthentication) ProtoMessage() {}

func (x *AlertActions_WebhookAction_BasicAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_flink_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertActions_WebhookAction_BasicAuthentication.ProtoReflect.Descriptor instead.
func (*AlertActions_WebhookAction_BasicAuthentication) Descriptor() ([]byte, []int) {
	return file_flink_service_proto_rawDescGZIP(), []int{31, 0, 1}
}

func (x *AlertActions_WebhookAction_BasicAuthentication) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AlertActions_WebhookAction_BasicAuthentication) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_flink_service_proto protoreflect.FileDescriptor

var file_flink_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72,
	0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x65, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x5b, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x22, 0x6c, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7b,
	0x0a, 0x1b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3a, 0x0a, 0x1a, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x23, 0x0a, 0x0d,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x44, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7b, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66,
	0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x53, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x22, 0x94, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x27, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0xa8, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x19, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x36, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x9a, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x07, 0x22, 0x9f, 0x03,
	0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x44, 0x12, 0x42, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a,
	0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f,
	0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xa4, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x64, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x44, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4a,
	0x6f, 0x62, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0d, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x75, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x54, 0x75,
	0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x75, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x38,
	0x0a, 0x0e, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x15, 0x56, 0x69, 0x65, 0x77, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xae, 0x03, 0x0a, 0x0a, 0x43, 0x45, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x12, 0x34, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x19, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x65,
	0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67,
	0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x19, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x65, 0x70,
	0x22, 0x82, 0x07, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66,
	0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x57, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x2e,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x57,
	0x68, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xfe, 0x02, 0x0a, 0x0b,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66,
	0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xda, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x22, 0x77, 0x0a, 0x09,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x05, 0x22, 0xa2, 0x05, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb3, 0x04, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x51,
	0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f,
	0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6c, 0x0a,
	0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x69, 0x2e,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x51, 0x0a, 0x0d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4d,
	0x0a, 0x13, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3d, 0x0a,
	0x0a, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x42, 0x0c, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x0c, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x5c, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0a, 0x63, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x43,
	0x45, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x65, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x76, 0x69, 0x65, 0x77, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66,
	0x69, 0x72, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x2c,
	0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x2a, 0x8a, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x07,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x09, 0x32, 0xca, 0x03, 0x0a, 0x0d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x6c,
	0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53,
	0x51, 0x4c, 0x12, 0x16, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e,
	0x53, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x69, 0x2e,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x69,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x2e,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67,
	0x66, 0x69, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e,
	0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f,
	0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x9b, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x18, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x69,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69,
	0x72, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x32, 0xe2, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x13,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x69,
	0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x61,
	0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x72, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flink_service_proto_rawDescOnce sync.Once
	file_flink_service_proto_rawDescData = file_flink_service_proto_rawDesc
)

func file_flink_service_proto_rawDescGZIP() []byte {
	file_flink_service_proto_rawDescOnce.Do(func() {
		file_flink_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_flink_service_proto_rawDescData)
	})
	return file_flink_service_proto_rawDescData
}

var file_flink_service_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_flink_service_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_flink_service_proto_goTypes = []any{
	(RecordType)(0),                       // 0: ai.logfire.RecordType
	(SeverityLevel)(0),                    // 1: ai.logfire.SeverityLevel
	(FieldBasedFilter_Operator)(0),        // 2: ai.logfire.FieldBasedFilter.Operator
	(StructuredAlertRequest_AlertWhen)(0), // 3: ai.logfire.StructuredAlertRequest.AlertWhen
	(StructuredAlertRequest_Aggregation_AggregationFunction)(0), // 4: ai.logfire.StructuredAlertRequest.Aggregation.AggregationFunction
	(AlertActions_WebhookAction_HttpMethod)(0),                  // 5: ai.logfire.AlertActions.WebhookAction.HttpMethod
	(*OffsetRequest)(nil),                                       // 6: ai.logfire.OffsetRequest
	(*OffsetResponse)(nil),                                      // 7: ai.logfire.OffsetResponse
	(*OffsetRecord)(nil),                                        // 8: ai.logfire.OffsetRecord
	(*SendNotificationRequest)(nil),                             // 9: ai.logfire.SendNotificationRequest
	(*SendNotificationResponse)(nil),                            // 10: ai.logfire.SendNotificationResponse
	(*ReceiveNotificationResponse)(nil),                         // 11: ai.logfire.ReceiveNotificationResponse
	(*ReceiveNotificationRequest)(nil),                          // 12: ai.logfire.ReceiveNotificationRequest
	(*GraphRequest)(nil),                                        // 13: ai.logfire.GraphRequest
	(*GraphResponse)(nil),                                       // 14: ai.logfire.GraphResponse
	(*RegisteredAlert)(nil),                                     // 15: ai.logfire.RegisteredAlert
	(*Empty)(nil),                                               // 16: ai.logfire.Empty
	(*SourceInfo)(nil),                                          // 17: ai.logfire.SourceInfo
	(*SQLRequest)(nil),                                          // 18: ai.logfire.SQLRequest
	(*SQLResponse)(nil),                                         // 19: ai.logfire.SQLResponse
	(*RecordDetailsRequest)(nil),                                // 20: ai.logfire.RecordDetailsRequest
	(*DateTimeFilter)(nil),                                      // 21: ai.logfire.DateTimeFilter
	(*RecordDetails)(nil),                                       // 22: ai.logfire.RecordDetails
	(*Source)(nil),                                              // 23: ai.logfire.Source
	(*FilterCancellationRequest)(nil),                           // 24: ai.logfire.FilterCancellationRequest
	(*FilterCancellationResponse)(nil),                          // 25: ai.logfire.FilterCancellationResponse
	(*FieldBasedFilter)(nil),                                    // 26: ai.logfire.FieldBasedFilter
	(*FilterRequest)(nil),                                       // 27: ai.logfire.FilterRequest
	(*FilteredRecord)(nil),                                      // 28: ai.logfire.FilteredRecord
	(*FilteredRecords)(nil),                                     // 29: ai.logfire.FilteredRecords
	(*FilterResponse)(nil),                                      // 30: ai.logfire.FilterResponse
	(*AlertJob)(nil),                                            // 31: ai.logfire.AlertJob
	(*AlertDetails)(nil),                                        // 32: ai.logfire.AlertDetails
	(*Window)(nil),                                              // 33: ai.logfire.Window
	(*ViewBasedAlertRequest)(nil),                               // 34: ai.logfire.ViewBasedAlertRequest
	(*CEPRequest)(nil),                                          // 35: ai.logfire.CEPRequest
	(*StructuredAlertRequest)(nil),                              // 36: ai.logfire.StructuredAlertRequest
	(*AlertActions)(nil),                                        // 37: ai.logfire.AlertActions
	(*AlertRequest)(nil),                                        // 38: ai.logfire.AlertRequest
	(*Window_TumblingWindow)(nil),                               // 39: ai.logfire.Window.TumblingWindow
	(*StructuredAlertRequest_Aggregation)(nil),                  // 40: ai.logfire.StructuredAlertRequest.Aggregation
	(*AlertActions_WebhookAction)(nil),                          // 41: ai.logfire.AlertActions.WebhookAction
	(*AlertActions_WebhookAction_HeaderDetails)(nil),            // 42: ai.logfire.AlertActions.WebhookAction.HeaderDetails
	(*AlertActions_WebhookAction_BasicAuthentication)(nil),      // 43: ai.logfire.AlertActions.WebhookAction.BasicAuthentication
	(*timestamppb.Timestamp)(nil),                               // 44: google.protobuf.Timestamp
}
var file_flink_service_proto_depIdxs = []int32{
	0,  // 0: ai.logfire.OffsetRequest.type:type_name -> ai.logfire.RecordType
	8,  // 1: ai.logfire.OffsetResponse.offsetRecords:type_name -> ai.logfire.OffsetRecord
	0,  // 2: ai.logfire.OffsetResponse.type:type_name -> ai.logfire.RecordType
	44, // 3: ai.logfire.SendNotificationResponse.timestamp:type_name -> google.protobuf.Timestamp
	44, // 4: ai.logfire.ReceiveNotificationResponse.timestamp:type_name -> google.protobuf.Timestamp
	23, // 5: ai.logfire.GraphRequest.sources:type_name -> ai.logfire.Source
	21, // 6: ai.logfire.GraphRequest.dateTimeFilter:type_name -> ai.logfire.DateTimeFilter
	26, // 7: ai.logfire.GraphRequest.fieldBasedFilters:type_name -> ai.logfire.FieldBasedFilter
	23, // 8: ai.logfire.SourceInfo.source:type_name -> ai.logfire.Source
	23, // 9: ai.logfire.SQLRequest.sources:type_name -> ai.logfire.Source
	21, // 10: ai.logfire.SQLRequest.dateTimeFilter:type_name -> ai.logfire.DateTimeFilter
	23, // 11: ai.logfire.SQLResponse.source:type_name -> ai.logfire.Source
	44, // 12: ai.logfire.DateTimeFilter.startTimeStamp:type_name -> google.protobuf.Timestamp
	44, // 13: ai.logfire.DateTimeFilter.endTimeStamp:type_name -> google.protobuf.Timestamp
	2,  // 14: ai.logfire.FieldBasedFilter.operator:type_name -> ai.logfire.FieldBasedFilter.Operator
	21, // 15: ai.logfire.FilterRequest.dateTimeFilter:type_name -> ai.logfire.DateTimeFilter
	26, // 16: ai.logfire.FilterRequest.fieldBasedFilters:type_name -> ai.logfire.FieldBasedFilter
	23, // 17: ai.logfire.FilterRequest.sources:type_name -> ai.logfire.Source
	28, // 18: ai.logfire.FilteredRecords.records:type_name -> ai.logfire.FilteredRecord
	23, // 19: ai.logfire.FilteredRecords.sources:type_name -> ai.logfire.Source
	38, // 20: ai.logfire.AlertJob.alertRequests:type_name -> ai.logfire.AlertRequest
	1,  // 21: ai.logfire.AlertDetails.alertSeverity:type_name -> ai.logfire.SeverityLevel
	39, // 22: ai.logfire.Window.tumblingWindow:type_name -> ai.logfire.Window.TumblingWindow
	23, // 23: ai.logfire.ViewBasedAlertRequest.sources:type_name -> ai.logfire.Source
	26, // 24: ai.logfire.ViewBasedAlertRequest.fieldBasedFilters:type_name -> ai.logfire.FieldBasedFilter
	1,  // 25: ai.logfire.ViewBasedAlertRequest.alertSeverity:type_name -> ai.logfire.SeverityLevel
	23, // 26: ai.logfire.CEPRequest.source:type_name -> ai.logfire.Source
	26, // 27: ai.logfire.CEPRequest.fieldBasedFilters:type_name -> ai.logfire.FieldBasedFilter
	26, // 28: ai.logfire.CEPRequest.fieldBasedFiltersAfterCep:type_name -> ai.logfire.FieldBasedFilter
	26, // 29: ai.logfire.StructuredAlertRequest.fieldBasedFilters:type_name -> ai.logfire.FieldBasedFilter
	3,  // 30: ai.logfire.StructuredAlertRequest.alertWhen:type_name -> ai.logfire.StructuredAlertRequest.AlertWhen
	40, // 31: ai.logfire.StructuredAlertRequest.aggregationRequest:type_name -> ai.logfire.StructuredAlertRequest.Aggregation
	33, // 32: ai.logfire.StructuredAlertRequest.window:type_name -> ai.logfire.Window
	23, // 33: ai.logfire.StructuredAlertRequest.source:type_name -> ai.logfire.Source
	41, // 34: ai.logfire.AlertActions.webhookAction:type_name -> ai.logfire.AlertActions.WebhookAction
	32, // 35: ai.logfire.AlertRequest.details:type_name -> ai.logfire.AlertDetails
	36, // 36: ai.logfire.AlertRequest.structuredAlertRequest:type_name -> ai.logfire.StructuredAlertRequest
	35, // 37: ai.logfire.AlertRequest.cepRequest:type_name -> ai.logfire.CEPRequest
	34, // 38: ai.logfire.AlertRequest.viewBasedAlertRequest:type_name -> ai.logfire.ViewBasedAlertRequest
	4,  // 39: ai.logfire.StructuredAlertRequest.Aggregation.aggregationFunction:type_name -> ai.logfire.StructuredAlertRequest.Aggregation.AggregationFunction
	5,  // 40: ai.logfire.AlertActions.WebhookAction.httpMethod:type_name -> ai.logfire.AlertActions.WebhookAction.HttpMethod
	42, // 41: ai.logfire.AlertActions.WebhookAction.headerDetails:type_name -> ai.logfire.AlertActions.WebhookAction.HeaderDetails
	43, // 42: ai.logfire.AlertActions.WebhookAction.basicAuthentication:type_name -> ai.logfire.AlertActions.WebhookAction.BasicAuthentication
	27, // 43: ai.logfire.FilterService.GetFilteredData:input_type -> ai.logfire.FilterRequest
	27, // 44: ai.logfire.FilterService.GetStreamData:input_type -> ai.logfire.FilterRequest
	18, // 45: ai.logfire.FilterService.SubmitSQL:input_type -> ai.logfire.SQLRequest
	38, // 46: ai.logfire.FilterService.SubmitAlertRequest:input_type -> ai.logfire.AlertRequest
	15, // 47: ai.logfire.FilterService.DeleteAlertRequest:input_type -> ai.logfire.RegisteredAlert
	6,  // 48: ai.logfire.FilterService.GetOffsetData:input_type -> ai.logfire.OffsetRequest
	13, // 49: ai.logfire.MetaService.GetBarGraph:input_type -> ai.logfire.GraphRequest
	13, // 50: ai.logfire.MetaService.GetStatus:input_type -> ai.logfire.GraphRequest
	12, // 51: ai.logfire.NotificationService.ReceiveNotification:input_type -> ai.logfire.ReceiveNotificationRequest
	9,  // 52: ai.logfire.NotificationService.SendNotification:input_type -> ai.logfire.SendNotificationRequest
	29, // 53: ai.logfire.FilterService.GetFilteredData:output_type -> ai.logfire.FilteredRecords
	29, // 54: ai.logfire.FilterService.GetStreamData:output_type -> ai.logfire.FilteredRecords
	19, // 55: ai.logfire.FilterService.SubmitSQL:output_type -> ai.logfire.SQLResponse
	15, // 56: ai.logfire.FilterService.SubmitAlertRequest:output_type -> ai.logfire.RegisteredAlert
	16, // 57: ai.logfire.FilterService.DeleteAlertRequest:output_type -> ai.logfire.Empty
	7,  // 58: ai.logfire.FilterService.GetOffsetData:output_type -> ai.logfire.OffsetResponse
	14, // 59: ai.logfire.MetaService.GetBarGraph:output_type -> ai.logfire.GraphResponse
	14, // 60: ai.logfire.MetaService.GetStatus:output_type -> ai.logfire.GraphResponse
	11, // 61: ai.logfire.NotificationService.ReceiveNotification:output_type -> ai.logfire.ReceiveNotificationResponse
	10, // 62: ai.logfire.NotificationService.SendNotification:output_type -> ai.logfire.SendNotificationResponse
	53, // [53:63] is the sub-list for method output_type
	43, // [43:53] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_flink_service_proto_init() }
func file_flink_service_proto_init() {
	if File_flink_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flink_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OffsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OffsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OffsetRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SendNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SendNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ReceiveNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ReceiveNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RegisteredAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SQLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SQLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RecordDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DateTimeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RecordDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCancellationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FilterCancellationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*FieldBasedFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*FilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*FilteredRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*FilteredRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*FilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AlertJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AlertDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ViewBasedAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CEPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*StructuredAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AlertActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*Window_TumblingWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*StructuredAlertRequest_Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*AlertActions_WebhookAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*AlertActions_WebhookAction_HeaderDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flink_service_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*AlertActions_WebhookAction_BasicAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flink_service_proto_msgTypes[11].OneofWrappers = []any{}
	file_flink_service_proto_msgTypes[27].OneofWrappers = []any{
		(*Window_TumblingWindow_)(nil),
	}
	file_flink_service_proto_msgTypes[31].OneofWrappers = []any{
		(*AlertActions_WebhookAction_)(nil),
	}
	file_flink_service_proto_msgTypes[32].OneofWrappers = []any{
		(*AlertRequest_StructuredAlertRequest)(nil),
		(*AlertRequest_CepRequest)(nil),
		(*AlertRequest_ViewBasedAlertRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flink_service_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_flink_service_proto_goTypes,
		DependencyIndexes: file_flink_service_proto_depIdxs,
		EnumInfos:         file_flink_service_proto_enumTypes,
		MessageInfos:      file_flink_service_proto_msgTypes,
	}.Build()
	File_flink_service_proto = out.File
	file_flink_service_proto_rawDesc = nil
	file_flink_service_proto_goTypes = nil
	file_flink_service_proto_depIdxs = nil
}
